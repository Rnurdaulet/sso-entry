import requests
from keycloak import KeycloakAdmin, KeycloakGetError
from jwt import encode as jwt_encode
from datetime import datetime, timedelta
import calendar
from django.conf import settings


def get_keycloak_admin():
    return KeycloakAdmin(
        server_url=f"{settings.KEYCLOAK_URL}/",
        realm_name=settings.KEYCLOAK_REALM,
        client_id=settings.KEYCLOAK_ADMIN_CLIENT_ID,
        client_secret_key=settings.KEYCLOAK_ADMIN_SECRET,
        verify=False  # –∏–ª–∏ False –µ—Å–ª–∏ –±–µ–∑ HTTPS
    )


import requests
from keycloak.exceptions import KeycloakGetError

def create_or_get_user(iin, full_name):
    keycloak_admin = get_keycloak_admin()

    # üîç 1. –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    try:
        users = keycloak_admin.get_users(query={"username": iin})
        if users:
            print(f"[SSO-PROXY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {iin} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. ID = {users[0]['id']}")
            return users[0]["id"]
    except KeycloakGetError as e:
        print(f"[SSO-PROXY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

    # üåê 2. –ó–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É API
    try:
        api_resp = requests.get(
            f"{settings.ORLEU_API}?iin={iin}",
            headers={"Authorization": f"Bearer {settings.ORLEU_API_TOKEN}"}
        )
        api_resp.raise_for_status()
        data = api_resp.json()
        if not data:
            print(f"[SSO-PROXY] –ò–ò–ù {iin} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ –≤–Ω–µ—à–Ω–µ–π –±–∞–∑–µ")
            return None
        user_info = data[0]
        print(f"[SSO-PROXY] –î–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API: {user_info}")
    except Exception as e:
        print(f"[SSO-PROXY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –≤–Ω–µ—à–Ω–µ–º—É API: {e}")
        return None

    # üë§ 3. –†–∞–∑–±–æ—Ä –§–ò–û
    parts = full_name.strip().split()
    last_name = parts[0] if len(parts) > 0 else ""
    first_name = parts[1] if len(parts) > 1 else ""

    email = user_info.get("email")
    roles = user_info.get("roles", [])

    user_data = {
        "username": iin,
        "enabled": True,
        "firstName": first_name,
        "lastName": last_name,
        "email": email,
        "emailVerified": True
    }

    # üÜï 4. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        keycloak_admin.create_user(user_data)
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
        users = keycloak_admin.get_users(query={"username": iin})
        if not users:
            print(f"[SSO-PROXY] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {iin}")
            return None
        user_id = users[0]["id"]
        print(f"[SSO-PROXY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {iin} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. ID = {user_id}")
    except Exception as e:
        print(f"[SSO-PROXY] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

    # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è user_id
    try:
        keycloak_admin.add_user_social_login(
            user_id=user_id,
            provider_id="sso-entry",
            provider_userid=iin,
            provider_username=iin
        )
        print(f"[SSO-PROXY] –£—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {iin} —Å IdP 'sso-entry'")
    except Exception as e:
        print(f"[SSO-PROXY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ IdP: {e}")

    # 5. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ (–∏–∑ realm-level roles)
    if roles:
        role_name = roles[0]
        try:
            available_roles = keycloak_admin.get_realm_roles()
            matched_role = next((r for r in available_roles if r["name"] == role_name), None)
            if matched_role:
                keycloak_admin.assign_realm_roles(user_id, [matched_role])
                print(f"[SSO-PROXY] –ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å {role_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {iin} (realm role)")
            else:
                print(f"[SSO-PROXY] –†–æ–ª—å {role_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ realm")
        except Exception as e:
            print(f"[SSO-PROXY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")

    return user_id

def sign_id_token(sub, name, aud, nonce=None):
    with open(settings.PRIVATE_KEY_PATH, "rb") as f:
        private_key = f.read()

    now = datetime.utcnow()
    payload = {
        "iss": settings.OIDC_ISSUER,
        "sub": sub,
        "aud": aud,
        "name": name,
        "iat": calendar.timegm(now.utctimetuple()),
        "exp": calendar.timegm((now + timedelta(hours=1)).utctimetuple()),
    }

    if nonce:
        payload["nonce"] = nonce

    return jwt_encode(payload, private_key, algorithm="RS256")


def is_valid_client(*args, **kwargs):
    return True
